//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/InputSystem/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player3D"",
            ""id"": ""a7459573-7374-40d8-a43a-7b0c4a0cdcb8"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""bb0f1f57-d01a-42a3-ad1d-d3f75de0f6af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""4292944a-567f-464f-a980-eb372376fa00"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""feb3a3a1-5e4f-45f7-8172-3e2919850349"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2f74935d-9de5-4a22-bba0-bdb434075d46"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9406aea0-5ef9-44ab-ab7a-6f4648b8929d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9a20ddbd-d6c9-4cb2-b95c-660503f60fe9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8fdcde99-65ea-4024-a4a3-9ee38ceda355"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3e0249aa-c80f-4aed-b28c-28ccd77528ff"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Player2D"",
            ""id"": ""b568e8af-dbe1-454b-aedd-11ce63c11485"",
            ""actions"": [
                {
                    ""name"": ""MoveEnvironment"",
                    ""type"": ""Value"",
                    ""id"": ""273e7b9d-9888-4c56-b56c-f4924f1a14e4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseInput"",
                    ""type"": ""Button"",
                    ""id"": ""74a6619a-984f-41e8-80c1-ceb6eb1bf384"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""425b4af5-f797-4847-ac3b-0bf576a011ec"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveEnvironment"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""27119738-968a-419a-aad1-6e5a6bf1ebc9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveEnvironment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fd876260-1688-435c-930b-60bc742b0255"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveEnvironment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f61fd026-311a-4802-9052-94a6844ff823"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94e3c8d7-357a-403e-8434-560856b78425"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player3D
        m_Player3D = asset.FindActionMap("Player3D", throwIfNotFound: true);
        m_Player3D_Jump = m_Player3D.FindAction("Jump", throwIfNotFound: true);
        m_Player3D_Movement = m_Player3D.FindAction("Movement", throwIfNotFound: true);
        // Player2D
        m_Player2D = asset.FindActionMap("Player2D", throwIfNotFound: true);
        m_Player2D_MoveEnvironment = m_Player2D.FindAction("MoveEnvironment", throwIfNotFound: true);
        m_Player2D_MouseInput = m_Player2D.FindAction("MouseInput", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player3D
    private readonly InputActionMap m_Player3D;
    private List<IPlayer3DActions> m_Player3DActionsCallbackInterfaces = new List<IPlayer3DActions>();
    private readonly InputAction m_Player3D_Jump;
    private readonly InputAction m_Player3D_Movement;
    public struct Player3DActions
    {
        private @PlayerInputActions m_Wrapper;
        public Player3DActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Player3D_Jump;
        public InputAction @Movement => m_Wrapper.m_Player3D_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Player3D; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player3DActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer3DActions instance)
        {
            if (instance == null || m_Wrapper.m_Player3DActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player3DActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IPlayer3DActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IPlayer3DActions instance)
        {
            if (m_Wrapper.m_Player3DActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer3DActions instance)
        {
            foreach (var item in m_Wrapper.m_Player3DActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player3DActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player3DActions @Player3D => new Player3DActions(this);

    // Player2D
    private readonly InputActionMap m_Player2D;
    private List<IPlayer2DActions> m_Player2DActionsCallbackInterfaces = new List<IPlayer2DActions>();
    private readonly InputAction m_Player2D_MoveEnvironment;
    private readonly InputAction m_Player2D_MouseInput;
    public struct Player2DActions
    {
        private @PlayerInputActions m_Wrapper;
        public Player2DActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveEnvironment => m_Wrapper.m_Player2D_MoveEnvironment;
        public InputAction @MouseInput => m_Wrapper.m_Player2D_MouseInput;
        public InputActionMap Get() { return m_Wrapper.m_Player2D; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player2DActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer2DActions instance)
        {
            if (instance == null || m_Wrapper.m_Player2DActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player2DActionsCallbackInterfaces.Add(instance);
            @MoveEnvironment.started += instance.OnMoveEnvironment;
            @MoveEnvironment.performed += instance.OnMoveEnvironment;
            @MoveEnvironment.canceled += instance.OnMoveEnvironment;
            @MouseInput.started += instance.OnMouseInput;
            @MouseInput.performed += instance.OnMouseInput;
            @MouseInput.canceled += instance.OnMouseInput;
        }

        private void UnregisterCallbacks(IPlayer2DActions instance)
        {
            @MoveEnvironment.started -= instance.OnMoveEnvironment;
            @MoveEnvironment.performed -= instance.OnMoveEnvironment;
            @MoveEnvironment.canceled -= instance.OnMoveEnvironment;
            @MouseInput.started -= instance.OnMouseInput;
            @MouseInput.performed -= instance.OnMouseInput;
            @MouseInput.canceled -= instance.OnMouseInput;
        }

        public void RemoveCallbacks(IPlayer2DActions instance)
        {
            if (m_Wrapper.m_Player2DActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer2DActions instance)
        {
            foreach (var item in m_Wrapper.m_Player2DActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player2DActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player2DActions @Player2D => new Player2DActions(this);
    public interface IPlayer3DActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IPlayer2DActions
    {
        void OnMoveEnvironment(InputAction.CallbackContext context);
        void OnMouseInput(InputAction.CallbackContext context);
    }
}
